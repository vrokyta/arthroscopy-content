# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["dev","main"]

  pull_request:
    branches: ["dev","main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ (github.ref != 'refs/heads/main' || github.event.pull_request.base.ref != 'main') && 'development' }}
    env:
      HUGO_VERSION: 0.111.3
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass-embedded
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          DEV_BASE_URL: ${{ vars.DEV_BASE_URL }}
        run: |
          if [ "${{ github.event.pull_request.base.ref }}" == "main" ] || [ "${{ github.ref }}" == "refs/heads/main" ]; then
            hugo \
              --minify \
              --baseURL "${{ steps.pages.outputs.base_url }}/"
            echo "baseURL - ${{ steps.pages.outputs.base_url }}"
            echo "Site in production environment was built"
          else
            hugo \
              --environment DEV \
              -D \
              --minify \
              --baseURL "$DEV_BASE_URL"
            echo "baseURL - $DEV_BASE_URL"
            echo "Site in DEV environment was built"
          fi
      - name: Upload GitHub Pages artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
      - name: Upload FTP artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        uses: actions/upload-artifact@v4
        with:
          name: public
          path: ./public

  # DEV Deployment job
  deploy-to-DEV:
    environment:
      name: development
      url: ${{ vars.DEV_BASE_URL }}
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    steps:
      - name: Download FTP artifact
        uses: actions/download-artifact@v4
      - name: Deploy to ${{ vars.DEV_BASE_URL }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: ./public/

  # GitHub Pages Deployment job
  deploy-to-gh-pages:
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
